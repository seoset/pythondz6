#Напишите программу, удаляющую из 
# текста все слова содержащие "абв".

my_text = 'Напишите абв напиабв програбвмму программу, удаляющую из \
    этого абв текста все вабвс слова, содерабващие содержащие "абв"'

def del_some_words(my_text):
    my_text = list(filter(lambda x: 'абв' not in x, my_text.split()))
    return " ".join(my_text)

my_text = del_some_words(my_text)
print(my_text)


#Создайте программу для игры с конфетами человек против человека. 
# Условие задачи: На столе лежит 2021 конфета. 
# Играют два игрока делая ход друг после друга. Первый ход определяется жеребьёвкой. 
# За один ход можно забрать не более чем 28 конфет. 
# Все конфеты оппонента достаются сделавшему последний ход. 
# Сколько конфет нужно взять первому игроку, чтобы забрать все конфеты у своего конкурента?
# a) Добавьте игру против бота
# б) Подумайте, как наделить бота "интеллектом"

# вариант человек против человека:
from random import randint

def input_dat(name):
    x = int(input(f"{name}, введите количество конфет, которое возьмете от 1 до 28: "))
    while x < 1 or x > 28:
        x = int(input(f"{name}, введите корректное количество конфет: "))
    return x


def p_print(name, k, counter, value):
    print(f"Ходил {name}, он взял {k}, теперь у него {counter}. Осталось на столе {value} конфет.")

player1 = input("Введите имя первого игрока: ")
player2 = input("Введите имя второго игрока: ")
value = int(input("Введите количество конфет на столе: "))
flag = randint(0,2) # флаг очередности
if flag:
    print(f"Первый ходит {player1}")
else:
    print(f"Первый ходит {player2}")

counter1 = 0 
counter2 = 0

while value > 28:
    if flag:
        k = input_dat(player1)
        counter1 += k
        value -= k
        flag = False
        p_print(player1, k, counter1, value)
    else:
        k = input_dat(player2)
        counter2 += k
        value -= k
        flag = True
        p_print(player2, k, counter2, value)

if flag:
    print(f"Выиграл {player1}")
else:
    print(f"Выиграл {player2}")


#Крестики нолики
#Компьютер играет в крестики -нолики против пользователя
#глобальные константы
X="X"
O="O"
EMPTY=' '
TIE="Ничья"
NUM_SQUARES=9

def display_instruct():
    '''Выводит на экран  иснтрукцию для игрока'''
    print(
"""
Добро пожаловать в игру Крестики-нолики!
С Вами  будет сражаться компьютер.
Что бы сделать свой ход , введите от 0 до 8.
Числа соответсвуют полям доски:
0 | 1 | 2
---------
3 | 4 | 5
---------
6 | 7 | 8
Приготовься к игре противник! сейчас начнется решающее сражение!\n
"""
        )
def ask_yes_no(question):
    """Задает вопросы с ответом 'Да' или'Нет".    """
    response=None
    while response not in("y","n"):
        response=input(question).lower()
    return response
def ask_number(question, low, high):
    """Просит ввести число из диапазона."""
    response=None
    while response not in range(low,high):
        response=int(input(question))
    return response
def pieces():
    "Определяет принадлежность первого хода"
    go_first=ask_yes_no("Хочешь оставить за собой первый ход?(y/n): ")
    if go_first=="y":
        print ("\n Ну что ж ,даю тебе фору играй крестиками")
        human = X
        computer = O
    else:
        print("\n Спасибо за то чтопредоставил перове право  хода компьютеру")
        computer = X
        human = O
    return computer, human
def new_board():
    "Создает новую игровую доску"
    board = []
    for square in range(NUM_SQUARES):
        board.append(EMPTY)
    return board
def  display_board(board):
    """Отображает  игровую  доску  на  экране."""
    print("\n\t", board[0], "|", board[l],"|",board[2])
    print("\t",  "---------")
    print("\n\t", board[3], "|", board[4],  "|", board[5])
    print("\t",  "---------")
    print("\n\t", board[6], "|", board[7],  "|",  board[8],"\n")

def legal_moves(board):
    """Создает список доступных ходов """
    moves=[]
    for square in range(NUM_SQUARES):
        if board[square] == EMPTY:
            moves.append(square)
    return moves
def winner(board):
    """Определяет победителя в игре """
    WAYS_TO_WIN=((0,1,2),
                 (3,4,5),
                 (6,7,8),
                 (0,3,6),
                 (1,4,7),
                 (2,5,8),
                 (0,4,8),
                 (2,4,6))
    for row in WAYS_TO_WIN:
        if board[row[0]]==board[row[1]]==board[row[2]] !=EMPTY:
            winner=board[row[0]]
            return winner
        if EMPTY not in board:
            return TIE
    return None

def human_move(board,human):
    """ Получает ход человека"""
    legal=legal_moves(board)
    move=None
    while move not in legal:
        move=ask_number("Твой ход. Выбери одно из полей (0-8):",0, NUM_SQUARES)
        if move not in legal:
            print ("\nСмешной человек! Это поле уже занято. Выбери другое.\n")
    print("Хорошо.....")
    return move
def computer_move(board, computer, human):
    """Делает ход копмьютер """
    #создание рабочей копии доски, потому что функция будет менятьнекоторые значения вс писке
    board=board[:]
    #поля от лучшего к худшему
    BEST_MOVES=[4,0,2,6,8,1,3,5,7]
    print("Я выберу номер", end=" ")
    for move in legal_moves(board):
        board[move]=computer
        #Если следующим хододом может победитькомпьютер,выберем тогда ход
        if winner(board)==computer:
            print(move)
            return move
        #выполним проверку, отменим внесения изменения
        board[move]=EMPTY
    #  поскольку следующим ходом  ни  одна  сторона  не  может  победить.
    #  выберем лучшее из  доступных  полей
    for move in BEST_MOVES:
        if move in legal_moves(board):
            print(move)
            return move
def next_turn(turn):
    """Осуществляет  переход хода."""
    if turn==X:
        return O
    else:
        return X
def congrat_winner(the_winner, computer, human):
    """Поздравляе;  победителя  игры."""
    if the_winner !=TIE:
        print("Три",the_winner,"в ряд!\n")
    else:
        print("Ничья!\n")
    if the_winner == computer:
        print("Победил кмопьютер!")
    elif the_winner==human:
        print("Поздравляю,Вы победили компьютер!")
    elif the_winner==TIE:
        print("Ничья!")
def main():
    """Основная часть программы """
    display_instruct()
    computer, human =pieces()
    turn = X
    board = new_board()
    display_board(board)
    while not winner(board):
        if turn ==human:
            move=human_move(board,human)
            board[move]=human
        else:
            move=computer_move(board,computer,human)
            board[move]=computer
        display_board(board)
        turn = next_turn(turn)
    the_winner=winner(board)
    congrat_winner(the_winner,computer,human)

#Запуск программы

main()
input("\n\nНажмите Enter, чтобы выйти.")

# RLE алгоритм: реализуйте модуль сжатия и восстановления данных.
# Входные и выходные данные хранятся в отдельных текстовых файлах.
# Пример:
# На сжатие:
# Входные данные:
# WWWWWWWWWWWWBWWWWWWWWWWWWBBBWWWWWWWWWWWWWWWWWWWWWWWWBWWWWWWWWWWWWWW
# Входные данные:
# 12W1B12W3B24W1B14W

with open('file_encode.txt', 'w') as data:
    data.write('WWWWWWWWWWWWBWWWWWWWWWWWWBBBWWWWWWWWWWWWWWWWWWWWWWWWBWWWWWWWWWWWWWW')

with open('file_encode.txt', 'r') as data:
    string = data.readline()

def rle_encode(decoded_string):
    encoded_string = ''
    count = 1
    char = decoded_string[0]
    for i in range(1, len(decoded_string)):
        if decoded_string[i] == char:
            count += 1
        else:
            encoded_string = encoded_string + str(count) + char
            char = decoded_string[i]
            count = 1
            encoded_string = encoded_string + str(count) + char
    return encoded_string


def rle_decode(encoded_string):
    decoded_string = ''
    char_amount = ''
    for i in range(len(encoded_string)):
        if encoded_string[i].isdigit():
            char_amount += encoded_string[i]
        else:
            decoded_string += encoded_string[i] * int(char_amount)
        char_amount = ''
    print(decoded_string)

    return decoded_string


with open('file_encode.txt', 'r') as file:
    decoded_string = file.read()

with open('file_decode.txt', 'w') as file:
    encoded_string = rle_encode(decoded_string)
    file.write(encoded_string)

print('Decoded string: \t' + decoded_string)
print('Encoded string: \t' + rle_encode(decoded_string))
print(f'Compress ratio: \t{round(len(decoded_string) / len(encoded_string), 1)}')
